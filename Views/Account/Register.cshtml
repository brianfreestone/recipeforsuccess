@model RecipeForSuccess.ViewModels.RegisterVM


@{
    Layout = "~/Views/Shared/_EmptyLayoutPage.cshtml";
}

<div class="background">
    <div class="register-form">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()


            <h2 class="text-center">Sign Up</h2>
            <p class="lead text-center">Please fill in this form to create an account!</p>
            @Html.ValidationSummary(true, "All fields must be filled out!", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.First_name, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.First_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.First_name, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Last_name, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.Last_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Last_name, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
                <small id="email-exists" class="text-danger col-md-3"></small>
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { id = "email-feedback", @class = "text-danger" })
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-3" })
                <small id="username-exists" class="text-danger col-md-3"></small>
                @Html.ValidationMessageFor(model => model.Username, "", new { id = "username-feedback", @class = "text-danger col-md-3 text-sm-left" })
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", minlength = "5" } })

            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-3" })
                <br />
                <div class="validator-row">
                    <span class="validator validator-fail" id="badgeUpper">1 Upper</span><div class="validator validator-fail" id="badgeLower">1 Lower</div>
                    <span class="validator validator-fail" id="badgeSpecial">1 Special</span><span class="validator validator-fail" id="badgeDigit">1 Number</span>
                    <span class="validator validator-fail" id="badgeLength">Min Length 8</span>
                    
                </div>
                <input type="password" id="txtPassword" name="Password" required="required" minlength="8" class="form-control" />
                @*@Html.PasswordFor(model => model.password, new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger text-sm-left" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Confirm_password, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.ValidationMessageFor(model => model.Confirm_password, "", new { @class = "text-danger col-md-4 text-sm-left" })
                <input type="password" id="txtConfirmPassword" name="Confirm_password" required="required" minlength="8" class="form-control" />
                @*@Html.PasswordFor(model => model.confirm_password, new { @class = "form-control" })*@


            </div>

            <div class="form-group">

                <input type="submit" id="btnSubmit" value="Create" class="btn btn-success btn-block" />

            </div>

            <div class="hint-text">Already have an account? <a href="/Account/Login">Login here</a></div>

        }
    </div>
</div>

@section scripts{

    <script>

        // this function is an ajax call to the web api
        //
        $('#Email').keyup(function () {
            let data = $('#Email').val();
            if (data.length > 2) {

                $.ajax({
                    url: '/api/email?email=' + data,
                    type: 'GET',

                    success: function (response) {
                        if (response == "Not Found") {
                            $('#email-exists').text('');
                            $('#btnSubmit').removeClass("disabled");
                            $('#btnSubmit').prop("disabled", false);
                        }
                        else {
                            $('#email-exists').text('Email already registered!');
                            $('#btnSubmit').addClass("disabled");
                            $('#btnSubmit').prop("disabled", true);
                        }
                    },
                    fail: function (er) {

                    }
                })
            }
        });

        $('#Username').keyup(function () {
            let data = $('#Username').val();
            if (data.length > 2) {

                $.ajax({
                    url: '/api/username?username=' + data,
                    type: 'GET',

                    success: function (response) {
                        if (response == "Not Found") {
                            $('#username-exists').text('');
                            $('#btnSubmit').removeClass("disabled");
                            $('#btnSubmit').prop("disabled", false);
                        }
                        else {
                            $('#btnSubmit').prop("disabled", true);
                            $('#btnSubmit').addClass("disabled");
                            $('#username-exists').text('Username already registered!');
                        }
                    },
                    fail: function (er) {

                    }
                })
            }
        });

        // this function tests the password for minimum requirements
        //
        $('#txtPassword').keyup(function () {


            let password = $('#txtPassword').val();
            let upperBadge = $("#badgeUpper");
            let lowerBadge = $("#badgeLower");
            let specialBadge = $("#badgeSpecial");
            let badgeDigit = $("#badgeDigit");
            let lengthBadge = $("#badgeLength");

            // test for uppercase
            if (password.match("(.*[A-Z].*)")) {
                upperBadge.removeClass("validator-fail").addClass("validator-success");
                $('#btnSubmit').prop("disabled", false);
            } else {
                upperBadge.removeClass("validator-success").addClass("validator-fail");
                $('#btnSubmit').prop("disabled", true);

            }

            // test for lowercase
            if (password.match("(.*[a-z].*)")) {
                lowerBadge.removeClass("validator-fail").addClass("validator-success");
                $('#btnSubmit').prop("disabled", false);
            } else {
                lowerBadge.removeClass("validator-success").addClass("validator-fail");
                $('#btnSubmit').prop("disabled", true);
            }

            // test for Special
            if (password.match("(.*[!@@#$%^&*()].*)")) {
                specialBadge.removeClass("validator-fail").addClass("validator-success");
                $('#btnSubmit').prop("disabled", false);
            } else {
                specialBadge.removeClass("validator-success").addClass("validator-fail");
                $('#btnSubmit').prop("disabled", true);

            }

            // test for digit
            if (password.match("(.*[0-9].*)")) {
                badgeDigit.removeClass("validator-fail").addClass("validator-success");
                $('#btnSubmit').prop("disabled", false);
            } else {
                badgeDigit.removeClass("validator-success").addClass("validator-fail");
                $('#btnSubmit').prop("disabled", true);

            }

            // test for length
            if (password.match(".{8,}")) {
                lengthBadge.removeClass("validator-fail").addClass("validator-success");
                $('#btnSubmit').prop("disabled", false);
            } else {
                lengthBadge.removeClass("validator-success").addClass("validator-fail");
                $('#btnSubmit').prop("disabled", true);

            }

        });

                                //$('#username').keyup(function () {
                                //    let data = $('#username').val();

                                //        $.ajax({
                                //            url: '/api/username?username=' = data,
                                //            type: 'GET',

                                //            success: function (response) {
                                //                if (response == "Not Found") {
                                //                    $('#username-exists').text('That Username already registered!');
                                //                    $('#btnSubmit').prop("disabled", true);
                                //                }
                                //            },
                                //            fail: function (er) {

                                //            }
                                //        })
                                //});

    </script>

}

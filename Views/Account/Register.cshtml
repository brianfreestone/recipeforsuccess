@model RecipeForSuccess.ViewModels.RegisterVM


@{
    Layout = "~/Views/Shared/_EmptyLayoutPage.cshtml";
}

<div class="background">
    <div class="register-form">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()


            <h2 class="text-center">Sign Up</h2>
            <p class="lead text-center">Please fill in this form to create an account!</p>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.first_name, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.first_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.first_name, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.last_name, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.last_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.last_name, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-6" })

                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { id = "email-feedback", @class = "text-danger" })
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                <small id="email-exists" class="text-danger"></small>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.username, "", new { id = "username-feedback", @class = "text-danger" })

            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-4" })

                @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.confirm_password, htmlAttributes: new { @class = "control-label col-md-8" })

                @Html.EditorFor(model => model.confirm_password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.confirm_password, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">

                <input type="submit" value="Create" class="btn btn-success btn-block" />

            </div>

            <div class="hint-text">Already have an account? <a href="/Account/Login">Login here</a></div>

        }
    </div>
</div>

@section scripts{

    <script>
        $('#email').blur(function () {
            let data = $('#email').val();

            $.ajax({
                url: '/api/email?email=' + data,
                type: 'GET',
             
                success: function (response) {
                    if (response == "Not Found") {
                        $('#email-exists').text('');
                    }
                    else {
                        $('#email-exists').text('Email already registered!');
                    }
                },
                fail: function (er) {

                }
            })

        });

    </script>

}

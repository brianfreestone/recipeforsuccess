@model RecipeForSuccess.ViewModels.RegisterVM


@{
    Layout = "~/Views/Shared/_EmptyLayoutPage.cshtml";
}
@section styles{
    <style>

        body {
            background-image: url("../Images/updatedkitchen.jpg");
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
        }
    </style>
}

<div class="background">
    <div class="register-form container">
        @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()


            <h2 class="text-center">Sign Up</h2>
            <p class="lead text-center">Please fill in this form to create an account!</p>
            @Html.ValidationSummary(false, "Correct the following errors:", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.First_name, htmlAttributes: new { @class = "control-label col-md-4" })
                @Html.ValidationMessageFor(model => model.First_name, "", new { @class = "text-danger" })

                @Html.EditorFor(model => model.First_name, new { htmlAttributes = new { @class = "form-control" } })


            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Last_name, htmlAttributes: new { @class = "control-label col-md-4" })
                @Html.ValidationMessageFor(model => model.Last_name, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.Last_name, new { htmlAttributes = new { @class = "form-control" } })


            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
                @Html.ValidationMessageFor(model => model.Email, "", new { id = "email-feedback", @class = "text-danger" })
                <small id="email-exists" class="text-danger col-md-3"></small>
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })

                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.ValidationMessageFor(model => model.Username, "", new { id = "username-feedback", @class = "text-danger col-md-3 text-sm-left" })
                <small id="username-exists" class="text-danger col-md-3"></small>

                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", minlength = "5" } })

            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger text-sm-left" })
                <br />
                <div class="validator-row">
                    <span class="validator validator-fail" id="badgeUpper">1 Upper</span><div class="validator validator-fail" id="badgeLower">1 Lower</div>
                    <span class="validator validator-fail" id="badgeSpecial">1 Special Char</span><span class="validator validator-fail" id="badgeDigit">1 Number</span>
                    <span class="validator validator-fail" id="badgeLength">Min Length 8</span>
                </div>
                <input type="password" id="txtPassword" name="Password" required="required" minlength="8" class="form-control" />
                @*@Html.PasswordFor(model => model.password, new { @class = "form-control" })*@


            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Confirm_password, htmlAttributes: new { @class = "control-label col-md-5" })
                @Html.ValidationMessageFor(model => model.Confirm_password, "", new { @class = "text-danger col-md-4 text-sm-left" })
                <input type="password" id="txtConfirmPassword" name="Confirm_password" required="required" minlength="8" class="form-control" />
                @*@Html.PasswordFor(model => model.confirm_password, new { @class = "form-control" })*@


            </div>

            <div class="form-group">
                <label class="control-label col-md-5" for="imageUpload">Upload a picture</label>
                <div class="col-md-7">
                    <label class="btn btn-primary">
                        Choose File<input type="file" name="file" id="imageUpload" hidden />
                    </label>
                    <img id="imgPreview" src="#" />
                </div>
            </div>

            <div class="form-group">

                <input type="submit" id="btnSubmit" value="Create" class="btn btn-success btn-block" />

            </div>

            <div class="hint-text">Already have an account? <a href="/Account/Login">Login here</a></div>

        }
    </div>
</div>

@section scripts{

    <script>

        $(function () {

            /* Preview Selected Image */
            function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $("img#imgPreview").attr("src", e.target.result).width(200).height(200);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }

            $("#imageUpload").change(function () {
                readURL(this);
            });
        });

        // this function is an ajax call to the web api
        //
        $('#Email').keyup(function () {
            let data = $('#Email').val();
            if (data.length > 2) {

                $.ajax({
                    url: '/api/email?email=' + data,
                    type: 'GET',

                    success: function (response) {
                        if (response == "Not Found") {
                            $('#email-exists').text('');
                            $('#btnSubmit').removeClass("disabled");
                            $('#btnSubmit').prop("disabled", false);
                        }
                        else {
                            $('#email-exists').text('Email already registered!');
                            $('#btnSubmit').addClass("disabled");
                            $('#btnSubmit').prop("disabled", true);
                        }
                    },
                    fail: function (er) {

                    }
                })
            }
        });

        $('#Username').keyup(function () {
            let data = $('#Username').val();
            if (data.length > 2) {

                $.ajax({
                    url: '/api/username?username=' + data,
                    type: 'GET',

                    success: function (response) {
                        if (response == "Not Found") {
                            $('#username-exists').text('');
                            $('#btnSubmit').removeClass("disabled");
                            $('#btnSubmit').prop("disabled", false);
                        }
                        else {
                            $('#btnSubmit').prop("disabled", true);
                            $('#btnSubmit').addClass("disabled");
                            $('#username-exists').text('Username already registered!');
                        }
                    },
                    fail: function (er) {

                    }
                })
            }
        });

        // this function tests the password for minimum requirements
        $('#txtPassword').keyup(function () {

            let ready = false;

            let password = $('#txtPassword').val();
            let upperBadge = $("#badgeUpper");
            let lowerBadge = $("#badgeLower");
            let specialBadge = $("#badgeSpecial");
            let badgeDigit = $("#badgeDigit");
            let lengthBadge = $("#badgeLength");

            // test for uppercase
            if (password.match("(.*[A-Z].*)")) {
                upperBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                upperBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for lowercase
            if (password.match("(.*[a-z].*)")) {
                lowerBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                lowerBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for Special
            if (password.match("(.*[!@@#$%^&*()].*)")) {
                specialBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                specialBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for digit
            if (password.match("(.*[0-9].*)")) {
                badgeDigit.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                badgeDigit.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for length
            if (password.match(".{8,}")) {
                lengthBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                lengthBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test if all validations complete
            //if (upperBadge.hasClass("validator-fail") ||
            //    lowerBadge.hasClass("validator-fail") ||
            //    specialBadge.hasClass("validator-fail") ||
            //    badgeDigit.hasClass("validator-fail") ||
            //    lengthBadge.hasClass("validator-fail")) {
            //    $('#btnSubmit').prop("disabled", true);
            //    $('#btnSubmit').addClass("disabled");
            //}
            //else {
            //    $('#btnSubmit').prop("disabled", false);
            //    $('#btnSubmit').removeClass("disabled");
            //}
        });

                                            //$('#username').keyup(function () {
                                            //    let data = $('#username').val();

                                            //        $.ajax({
                                            //            url: '/api/username?username=' = data,
                                            //            type: 'GET',

                                            //            success: function (response) {
                                            //                if (response == "Not Found") {
                                            //                    $('#username-exists').text('That Username already registered!');
                                            //                    $('#btnSubmit').prop("disabled", true);
                                            //                }
                                            //            },
                                            //            fail: function (er) {

                                            //            }
                                            //        })
                                            //});

    </script>

}

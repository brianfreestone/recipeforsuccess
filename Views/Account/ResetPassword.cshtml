@model RecipeForSuccess.ViewModels.EditUserPasswordVM

@{
    ViewBag.Title = "ResetPassword";
}

<h2>ResetPassword</h2>

@using (Html.BeginForm())
{


    @Html.AntiForgeryToken()

    @*<div class="form-horizontal">*@

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.User_id)


    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-4 " })
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger col-md-4" })
        <div class="validator-row">
            <span class="validator validator-fail" id="badgeUpper">1 Upper</span><div class="validator validator-fail" id="badgeLower">1 Lower</div>
            <span class="validator validator-fail" id="badgeSpecial">1 Special Char</span><span class="validator validator-fail" id="badgeDigit">1 Number</span>
            <span class="validator validator-fail" id="badgeLength">Min Length 8</span>
        </div>
        <div class="col-md-12">
            <input type="password" id="txtPassword" name="Password" required="required" minlength="8" class="form-control col-md-12" />
            @* @Html.PasswordFor(model => model.Password, new { htmlAttributes = new { @class = "form-control col-md-2" } })*@
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Confirm_password, htmlAttributes: new { @class = "control-label col-md-6" })
        @Html.ValidationMessageFor(model => model.Confirm_password, "", new { @class = "text-danger" })
        <div class="col-md-12">
            <input type="password" id="txtConfirmPassword" name="Confirm_password" required="required" minlength="8" class="form-control col-md-12" />
            @*@Html.PasswordFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control col-md-2" } })*@

        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Update" class="btn btn-success" />
        </div>
    </div>

}

@section scripts{
    <script>

        // this function tests the password for minimum requirements
        $('#txtPassword').keyup(function () {

            let ready = false;

            let password = $('#txtPassword').val();
            let upperBadge = $("#badgeUpper");
            let lowerBadge = $("#badgeLower");
            let specialBadge = $("#badgeSpecial");
            let badgeDigit = $("#badgeDigit");
            let lengthBadge = $("#badgeLength");

            // test for uppercase
            if (password.match("(.*[A-Z].*)")) {
                upperBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                upperBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for lowercase
            if (password.match("(.*[a-z].*)")) {
                lowerBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                lowerBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for Special
            if (password.match("(.*[!@@#$%^&*()].*)")) {
                specialBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                specialBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for digit
            if (password.match("(.*[0-9].*)")) {
                badgeDigit.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                badgeDigit.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test for length
            if (password.match(".{8,}")) {
                lengthBadge.removeClass("validator-fail").addClass("validator-success");
                //$('#btnSubmit').prop("disabled", false);
            } else {
                lengthBadge.removeClass("validator-success").addClass("validator-fail");
                //$('#btnSubmit').prop("disabled", true);
            }

            // test if all validations complete
            //if (upperBadge.hasClass("validator-fail") ||
            //    lowerBadge.hasClass("validator-fail") ||
            //    specialBadge.hasClass("validator-fail") ||
            //    badgeDigit.hasClass("validator-fail") ||
            //    lengthBadge.hasClass("validator-fail")) {
            //    $('#btnSubmit').prop("disabled", true);
            //    $('#btnSubmit').addClass("disabled");
            //}
            //else {
            //    $('#btnSubmit').prop("disabled", false);
            //    $('#btnSubmit').removeClass("disabled");
            //}
        });

    </script>
}


